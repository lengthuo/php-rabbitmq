
#rabbitmq

###安装rabbitmq
      brew install rabbitmq

###基础使用

     https://www.rabbitmq.com/getstarted.html  （6中交互方式，每一种的具体讲解）

     查看所有的交换机    rabbitmqctl list_exchanges  列出交换机类型（可以自己创建）
     查看队列和交换机的绑定方式   rabbitmqctl list_bindings  列出绑定关系

###exchange的几种交换方式（可以自己定义，具体参考官方文档）
    1. 扇形交换  exchange-three-xx.php 是扇形路由（广播路由）：开启多个消费者，查看消息
    2. 直接交换  exchange-four-xx.php  会根据相应的规则名称，把消息发到相应的地方
    3. 主题交换  exchange-topic-xx.php
    4. 首部交换

###路由规则(具体参考[官方文档](/www.rabbitmq.com))
    > 在路由选择键中可以有任意数量的字，最多255个字节。 *（星号）可以代替一个字。＃（散列）可以代替零个或多个单词。


###分布式事务的解决方案 (关于分布式事务，工程领域主要讨论的是强一致性和最终一致性的解决方案。)

    ####名字解释：
        1. CAP定理    一致性   可用性(发出一个请求后，服务能在有限时间内返回结果)   分区容错性（系统一部分不可用,不会影响其它部分）
        2. Base理论   （可以通过放弃系统在每个时刻的强一致性来换取系统的可扩展性。）
    ####一致性模型：
        1. 强一致性：数据更新成功后，任意时刻所有副本中的数据都是一致的，一般采用同步的方式实现。
        2. 弱一致性：数据更新成功后，系统不承诺立即可以读到最新写入的值，也不承诺具体多久之后可以读到。
        3. 最终一致性：弱一致性的一种形式，数据更新成功后，系统不承诺立即可以返回最新写入的值，但是保证最终会返回上一次更新操作的值。
    ####解决方案：
        1.  2PC 3PC
        2.  eBay 事件队列方案
        3.  TCC  补偿模式
        4.  缓存数据最终一致性


        [基于消息的RPC微服务解耦](https://programmaticponderings.com/2017/05/08/decoupling-microservices-using-message-based-rpc-ipc-with-spring-rabbitmq-and-ampq/)
        [最终一致性解决方案](https://programmaticponderings.com/2017/05/15/eventual-consistency-decoupling-microservices-with-spring-amqp-and-rabbitmq/)


